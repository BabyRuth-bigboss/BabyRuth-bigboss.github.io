<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>详谈const in C++</title>
      <link href="/2021/09/22/xiang-tan-const-in-c/"/>
      <url>/2021/09/22/xiang-tan-const-in-c/</url>
      
        <content type="html"><![CDATA[<h1 id="const"><a href="#const" class="headerlink" title="const"></a>const</h1><blockquote><p>学习C++那些事的个人笔记，原项目链接<a href="https://github.com/Light-City/CPlusPlusThings">C++那些事</a> </p></blockquote><h2 id="const-1"><a href="#const-1" class="headerlink" title="const"></a>const</h2><h3 id="为什么要用const常量代替-define"><a href="#为什么要用const常量代替-define" class="headerlink" title="为什么要用const常量代替#define?"></a>为什么要用<strong>const</strong>常量代替<code>#define</code>?</h3><p>因为<code>const</code>常量具有类型，编译器可以进行安全检查；<code>#define</code> 宏定义没有数据类型，只是简单的字符串替换，不能进行安全检查。</p><blockquote><p>宏是源代码的预处理手段，宏本身并非C++语言的一部分；宏是全局的，面向对象的程序设计中破坏了封装，不好！</p><p>具体做法：用常量、枚举、和内联函数代替<code>#define</code></p></blockquote><h3 id="const限定的变量和const常量"><a href="#const限定的变量和const常量" class="headerlink" title="const限定的变量和const常量"></a>const限定的变量和const常量</h3><ol><li>const定义的变量的类型<code>(type)</code>为整数或枚举时,且以常量表达式初始化时才能作为常量表达式。</li><li>其他情况下它只是一个<code>const</code>限定的变量，不是常量！</li></ol><h3 id="const作用"><a href="#const作用" class="headerlink" title="const作用"></a>const作用</h3><ol><li>,尽量使用常量，防止修改，增加程序健壮性。这是防卫型(defensive)程序设计原则</li><li>节省空间，避免不必要的内存分配</li></ol><blockquote><p>const定义常量从汇编角度看只是给出了对应的内存地址，在程序运行过程中只有一份拷贝（具体是内存空间的什么位置，等学到相关知识再进行补充）</p><p><code>#define</code> 给出的是立即数，在内存中有若干个拷贝</p></blockquote><h3 id="const对象默认文件局部变量"><a href="#const对象默认文件局部变量" class="headerlink" title="const对象默认文件局部变量"></a>const对象默认文件局部变量</h3><pre class=" language-C++"><code class="language-C++">// file1.cppint ext;// file2.cpp#include<iostream>/** * by 光城 * compile: g++ -o file file2.cpp file1.cpp * execute: ./file */extern int ext; //用的是file1.cpp的ext,这是一个声明int main(){    std::cout<<(ext+10)<<std::endl;}</code></pre><blockquote><p>非<code>const</code>变量默认为<code>extern</code>，未被<code>const</code>修饰的变量定义时无需<code>extern</code>显式定义</p></blockquote><pre class=" language-C++"><code class="language-C++">//extern_file1.cppextern const int ext=12;//extern_file2.cpp#include<iostream>/** * by 光城 * compile: g++ -o file const_file2.cpp const_file1.cpp * execute: ./file */extern const int ext;int main(){    std::cout<<ext<<std::endl;}</code></pre><blockquote><p>const常量定义初始化，需要显式声明</p></blockquote><h3 id="指针与const"><a href="#指针与const" class="headerlink" title="指针与const"></a>指针与const</h3><h4 id="各种指针的声明方式"><a href="#各种指针的声明方式" class="headerlink" title="各种指针的声明方式"></a>各种指针的声明方式</h4><pre class=" language-C++"><code class="language-C++">const char* a;       //指向const对象的指针，指向常量的指针 const datachar const* a;       //const data, same as above.char* const a;       //指向char对象的const指针 const pointerconst char* const a; //const pointer, const data</code></pre><p>如果<code>const</code>位于<code>*</code>的左侧，则<code>const</code>就是用来修饰指针所指向的对象；如果<code>const</code>位于<code>*</code>的右侧，<code>const</code>就是修饰指针本身，即指针本身是常量。</p><p><strong>允许把非const对象的地址赋给指向const对象的指针</strong>，如果需要修改指针所指向的对象值，必须通过其他方式（）修改，不能直接通过当前指针修改。</p><h5 id="我的理解"><a href="#我的理解" class="headerlink" title="我的理解"></a>我的理解</h5><ol><li>指向const对象的指针指向的对象不一定是常量，只不过这个指针只能访问该对象，不能修改这个对象而已。这只是约束指针的一种手段，不管对象是不是常量，你都不能改。别人可以改你不行</li><li>const常量的地址只能赋给指向常量的指针或者指向常量的常量指针(<code>const pointer</code>)</li></ol><p>常指针必须初始化，const指针的值不能修改</p><p><em><strong>注意</strong></em>：assignment of read-only variable ‘ptr’<code>这个ptr是const指针，他是只读的指针，不能写</code></p><pre class=" language-C++"><code class="language-C++">#include<iostream>using namespace std;int main(){    int a  = 10;    int b= 20;    int* const ptr1 = &a;    *ptr1 = 15;    // ptr1 = &b;   // error: assignment of read-only variable ‘ptr1’    const int* ptr2;    ptr2 = &a;    ptr2 = &b;    // *ptr2 = 100;    //error: assignment of read-only location ‘* ptr2’    cout << *ptr1 << endl;    cout << *ptr2 << endl;    return 0;}</code></pre><blockquote><p>总结：</p><p>常量指针如ptr1，Ptr1的值是一个地址，地址不能改，<strong>常量指针不是常量！</strong>，是const限定的变量</p><p>指向常量的指针如ptr2，可以更改指向，这个指针并不是常量，只是常量的地址一定要由指向常量的指针指向，不过指向常量的指针也可以不指向常量，只是无法通过指向常量的指针去修改这个东西而已。</p></blockquote><h3 id="函数中使用const"><a href="#函数中使用const" class="headerlink" title="函数中使用const"></a>函数中使用const</h3><h4 id="无意义的情况"><a href="#无意义的情况" class="headerlink" title="无意义的情况"></a>无意义的情况</h4><pre class=" language-C++"><code class="language-C++">const int func1();        //返回值本身就是赋值给其他的变量void func(const in val);  //形参在函数体内不会改变，包括传入的形参是指针void func(int* const var);//指针本身不可变</code></pre><blockquote><p>输入参数用“值传递”，函数将自动产生临时变量用于复制该参数，无需保护</p></blockquote><h4 id="有意义的情况"><a href="#有意义的情况" class="headerlink" title="有意义的情况"></a>有意义的情况</h4><pre class=" language-C++"><code class="language-C++">const int* func1(); //返回指向常量的指针，指针指向的内容不会因为这个指针发生变化（相当于这个指针是只读指针）int* const fun2(); //返回常量指针，指向不会变，指针本省不可变void StringCopy(char* dst, const char* src);//函数体内不能更改src的内容void func(const A& a)//参数为引用，增加效率同时防止修改</code></pre><p> 引用就是一个常量指针，指向不能变</p><p> <code>引用传递</code> 不会产生临时对象</p><p><code>void func(A a)</code> 函数效率低，函数会产生A类型的临时对象用于复制参数<code>a</code> ，临时对象的构造、复制、析构过程都将消耗时间。</p><p>** <code>void func(int x)</code> 需要改为 <code>void func(const int&amp; x)</code> 吗？ **</p><p><strong>不需要</strong> 内置数据类型（built-in type）的参数不存在构造、析构的过程，复制很快，“值传递”和“引用传递”的效率几乎相当。</p><p><strong>面试题</strong></p><ol><li>如果函数需要传入一个指针，是否需要为该指针加上const，把const加在指针不同的位置有什么区别；</li><li>如果写的函数需要传入的参数是一个复杂类型的实例，传入值参数或者引用参数有什么区别，什么时候需要为传入的引用参数加上const。</li></ol><h3 id="类中使用const（未完成）"><a href="#类中使用const（未完成）" class="headerlink" title="类中使用const（未完成）"></a>类中使用const（未完成）</h3><blockquote><p>类中，任何不会修改数据成员的函数都应该声明为const类型，可以提高程序的健壮性</p></blockquote><p><strong>常成员函数</strong>：使用const关键字进行说明的成员函数，<strong>只有</strong>常成员函数可以操作常量或常对象</p><p>学识粗浅写作仓促，如有错误辛苦评论或 <a href="babyruth2403144@163.com">邮件</a> 指出，欢迎交流！</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法学习日历</title>
      <link href="/2021/09/20/suan-fa-xue-xi-ri-li/"/>
      <url>/2021/09/20/suan-fa-xue-xi-ri-li/</url>
      
        <content type="html"><![CDATA[<h3 id="理想情况"><a href="#理想情况" class="headerlink" title="理想情况"></a>理想情况</h3><p>一轮： 数组 -&gt;字符串 -&gt;链表-&gt;二分查找-&gt;排序-&gt;哈希表-&gt; 栈-&gt;队列 -&gt;树 、递归、回溯 -&gt; 堆 </p><p>简单题</p><p><span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>二轮：拓扑排序-&gt;分治算法-&gt; 二叉搜索树-&gt;贪心算法-&gt;动态规划-&gt; 深度优先搜索 -&gt; 广度优先搜索–&gt;图-&gt;数学 </p><p>一轮中等题，二轮简单题</p><p>三轮： 字典树-&gt; 并查集 -&gt; 树状数组-&gt;线段树</p><ul><li>一轮简单题</li><li>一轮中等题加二轮简单题</li><li>一轮hard（尝试），二轮中等（选看到有思路的题目），三轮简单。</li></ul><h3 id="目前进行"><a href="#目前进行" class="headerlink" title="目前进行"></a>目前进行</h3><p>第一轮 预计共30天 题目大概160道。</p><p>一轮： 数组 -&gt;字符串 -&gt;链表-&gt;二分查找-&gt;排序-&gt;哈希表-&gt; 栈-&gt;队列 -&gt;树、递归-&gt;二叉搜索树-&gt;回溯算法 -&gt; 贪心算法-&gt;动态规划-&gt;单调栈    </p><p><strong>时间2021/8/12 - 2021/9/15  中间休息了两天，等于一个月过了一轮，总共刷了大概160题。</strong></p><p>二轮：从剑指offer入手，每天写剑指offer专题（2-3）道题，同时看剑指offer的书，刷书上的题预计一个月</p><p>二轮：拓扑排序（各种排序）-&gt;堆-&gt;分治算法-&gt; 深度优先搜索 -&gt; 广度优先搜索–&gt;图-&gt;数学 </p><p>一轮中等题，二轮简单题</p><p>三轮： 字典树-&gt; 并查集 -&gt; 树状数组-&gt;线段树</p><ul><li>一轮简单题 加部分中等题</li><li>一轮中等题加二轮简单题</li><li>一轮hard（尝试），二轮中等（选看到有思路的题目），三轮简单。</li></ul><h3 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h3><ul><li>首先通过大概一个月的时间，快速刷题，了解做题套路和题目的大致类型，相当于一轮中的到单调栈，期间看代码随想录，没有看书。通过做题了解数据结构。<strong>9.15结束一轮</strong></li><li>然后回到书本，看大话数据结构 和 算法笔记 的内容，做大概50道PAT的题目+若干道牛客网的题目，其中有处理输入输出的部分。大话数据结构中有一些内容不一定要做题，但是要有基本的概念，比如B+树这种，算法笔记要刷题了这一次，在leetcode 上也找一点题目做。</li><li><strong>预计10.15结束，期间做题大概累计到PAT50道，Leetcode220道，期间重刷题目</strong></li><li></li><li>二刷简单题争取一天可以做大概50道题，记录二刷还不懂的题目。然后要进行龟速记录总结题目了。</li><li>结束三轮，争取在12月之前结束。</li></ul><hr><p><strong>一轮</strong></p><h2 id="数组-一轮用时6天，好像没做完"><a href="#数组-一轮用时6天，好像没做完" class="headerlink" title="数组 一轮用时6天，好像没做完"></a>数组 一轮用时6天，好像没做完</h2><p>2021/6/1 - 2021/6/6 完成一遍。</p><h2 id="链表题目-一轮用时1天？"><a href="#链表题目-一轮用时1天？" class="headerlink" title="链表题目 一轮用时1天？"></a>链表题目 一轮用时1天？</h2><p>2021/8/12 今天学习链表 1，2，4，5，7，8 ？差不多。习题没做</p><h2 id="哈希表题目-一轮用时2天"><a href="#哈希表题目-一轮用时2天" class="headerlink" title="哈希表题目 一轮用时2天"></a>哈希表题目 一轮用时2天</h2><p>438 </p><p><a href="https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/">https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/</a></p><p>2021/8/13 今天学习哈希表 从1 - 8 还剩 9 - 11；习题做了。</p><p>2021/8/14 哈希完成。字符串1,2.3</p><h2 id="字符串-加-栈和队列-一轮用时-4天，中间断了两天"><a href="#字符串-加-栈和队列-一轮用时-4天，中间断了两天" class="headerlink" title="字符串 加 栈和队列 一轮用时 4天，中间断了两天"></a>字符串 加 栈和队列 一轮用时 4天，中间断了两天</h2><p>2021/8/14 字符串1，2，3</p><p>2021/8/17 字符串4，5，留了两道KMP的题目，晚上先看理论，明天再完成。</p><p>2021/8/17 双指针法 除了删除链表第N个节点，其他的都写过，暂时没写，进入下一个专题</p><p>2021/8/17 栈与队列 先不开始了，先搞一下C++关于STL容器或容器适配器的语法。</p><p>2021/8/18 字符串KMP知道原理了，但是代码实现不出来。</p><p>2021/8/18 栈与队列1，2，3，4，5，6，明天KMP加剩下两道题。</p><p>2021/8/19 KMP两道题，一道优先队列，一道滑动窗口 字符串和栈完结，没看总结，总结直接回顾。已经61题了。</p><h2 id="二叉树-一轮用时10天"><a href="#二叉树-一轮用时10天" class="headerlink" title="二叉树 一轮用时10天"></a>二叉树 一轮用时10天</h2><p>2021/8/20 二叉树1，2，3，5。 4是统一的迭代写法，暂时不看，没必要。5中199 116 117没写，其余7道自己完成！。</p><p>2021/8/20 6 只用层序遍历法完成了，其他方法没写。已经完成72道题。今天写了12道题，是二叉树关于遍历的简单题，不要骄傲哦。</p><p>2021/8/21 今天二叉树！199独立完成。116和117一样的。226其他方法自己研究一下。 8之后下周开始。这周做一些贪心</p><p>2021/8/21 贪心初探 分发饼干，人麻了，之前看过的。回到二叉树吧</p><p>2021/8/22 二叉树 今天完成每日一题，鬼抓人问题，已经77题了，加油！完成8，9，10，11。已经82题了，即将一百题。</p><p>2021/8/23 二叉树 12，13，15，16，17，18 （注意：18 中113路径总和二的题解不懂）（19，20没精力了已经88道题了</p><p>2021/8/24 STL leetcode 3道题 已经91题了。今天算法holiday。</p><p>2021/8/25 二叉树 18 路径总和二 ，19，20，21 94题了， 今天的三道题有点难度，中序后序构建二叉树，还有最大树</p><p>2021/8/26 二叉树 22，23，24，25。100题了！！！</p><p>2021/8/27 二叉树 今天状态不好，刷几道简单题 二叉树不进行。晚睡状态太差了。</p><p>2021/8/28 二叉树 小问题，map的顺序。26，27，28，29，30，31(迭代法先没写，二刷再写) 昨晚睡的还行，状态好很多。麻了。106道题了，今天的每日一题，真的太简单了。</p><p>2021/8/29 完成二叉树，只剩最后三道题了。leetcode669 这道题玩我，为什么会有奇怪的输入递归可以通过但是输入还是报错？？迭代法就不行？？。问题找到了。108只写了递归法（迭代法留到二刷）。二叉树全部习题结束。</p><pre class=" language-C++"><code class="language-C++">class Solution {//迭代法，未通过代码。问题已经找到，是什么呢？？！！！！！！        while (root != nullptr && root->val < low || root->val > high)</code></pre><h2 id="回溯算法-一轮用时3天-麻了9-6已经把回溯忘完了。"><a href="#回溯算法-一轮用时3天-麻了9-6已经把回溯忘完了。" class="headerlink" title="回溯算法 一轮用时3天 麻了9.6已经把回溯忘完了。"></a>回溯算法 一轮用时3天 麻了9.6已经把回溯忘完了。</h2><p>2021/8/30 开始回溯算法1，2，3，4，5，，7，8进行了8节，然后做了5道题，题目思路想法较为统一，熟练掌握即可。解决了115道题了。</p><p>2021/8/31 回溯算法 9，10，11，，13，14，15，16 完成，已经完成122道题。</p><p>2021/9/1 回溯算法 18，19，20，21。最后四道题，周末总结都没做。18昨天都写过，不写。22周末总结先不看。</p><h2 id="贪心算法-一轮用时3-5天"><a href="#贪心算法-一轮用时3-5天" class="headerlink" title="贪心算法 一轮用时3.5天"></a>贪心算法 一轮用时3.5天</h2><p>2021/9/2 贪心算法1 ，2，3，4，6，7，12 。已经130道题了。</p><p>2021/9/3 贪心算法8，9，11，13，14，16，17。已经135道题了。17 18即为相似。</p><p>2021/9/4 贪心算法 预计18，19，20，22，（23没写，和动态规划一起写，带手续费了）。已经138道题了。</p><p>2021/9/5 贪心算法 24 （23留到动态规划一起写）结束贪心！（23贪心太复杂，先放弃）</p><h2 id="动态规划-一轮用时9天"><a href="#动态规划-一轮用时9天" class="headerlink" title="动态规划 一轮用时9天"></a>动态规划 一轮用时9天</h2><p>2021/9/5 动态规划 1，2，3，4，6（数论方法和深度搜索方法没有写），7，8，9，11</p><p>2021/9/6 动态规划 11，12，（11，12是好东西，一定要多看几遍）13，14，16，17，18  已经150题了！即将进入前十万</p><p>2021/9/7 动态规划 19，21，22，23，24，26，27，28， 29，30，31。</p><p>2021/9/8 动态规划 32，34，35，36（36没写），37（37没写），39  已经160题了</p><p>2021/9/9 动态规划 36，37，41，42，43   两个股票完成，太难了，今天状态不太好，明天加油。 167了，加油，明天就前十万了！！！！哈哈，他好像是12点更新，所以确实是9/10 进入前十万咯！！！</p><p>2021/9/10 动态规划44， 45， 46，47，48，49 ，50今天有简单题没有想到动态规划的解法，很遗憾，加油。48，50看不明白。 172道题了。</p><p>2021/9/11 动态规划 今天出去转了一天，头很晕，状态很差，随便看看题解。休息day</p><p>2021/9/12  动态规划 写一道每日一题就好了。有栈，贪心，动态规划（复杂度太高，不做了）三种情况，都写一遍，明早拿下最后四道动态规划！</p><p>2021/9/13  动态规划 48，50，52（双指针法没写，很好），53 （放过最长回文子序列，放过我自己）呜呜呜</p><h2 id="单调栈-一轮用时2天"><a href="#单调栈-一轮用时2天" class="headerlink" title="单调栈 一轮用时2天"></a>单调栈 一轮用时2天</h2><p>2021/9/14单调栈 1，2，3 今天晚上7点开冲，势必拿下!已经拿下，你是最棒的！抱住弱小的自己。182道题了</p><p>2021/9/15单调栈4，5 + 最长回文字串   5的单调栈写法还不会。187道题了。</p><p><strong>一轮over</strong></p><hr><p><strong>二轮</strong> </p><h2 id="剑指Offer-预计一个月到10月15号-每日总结"><a href="#剑指Offer-预计一个月到10月15号-每日总结" class="headerlink" title="剑指Offer 预计一个月到10月15号 每日总结"></a>剑指Offer 预计一个月到10月15号 每日总结</h2><p>2021/9/16 03 04 002 003 今天001没有写出来，除法有点难。麻了 已经192道题了</p><p>2021/9/17 05 06  004只会简单的sort和哈希（还有三种方法不会）006双指针最优解（二分查找不是最优不会）005不会写不出来</p><p>18 19 20 中秋节放假</p><p>2021/9/21 07 很久没有写重建二叉树了，一个bug卡了我30分钟</p><p>2021/9/22  07 09 10 11 今天总体还不错</p>]]></content>
      
      
      <categories>
          
          <category> 总动员篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法学习 </tag>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/09/20/hello-world/"/>
      <url>/2021/09/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
