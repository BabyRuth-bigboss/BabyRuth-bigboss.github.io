<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>函数模板封装排序算法</title>
      <link href="/2021/09/26/han-shu-mo-ban-feng-zhuang-kuai-su-pai-xu-he-gui-bing-pai-xu/"/>
      <url>/2021/09/26/han-shu-mo-ban-feng-zhuang-kuai-su-pai-xu-he-gui-bing-pai-xu/</url>
      
        <content type="html"><![CDATA[<h1 id="随笔"><a href="#随笔" class="headerlink" title="随笔"></a>随笔</h1><p>先直接给出我写的测试代码</p><pre class=" language-C++"><code class="language-C++">/* ************************************************************************> File Name:     template.cpp> Author:        babyruth> Created Time:  Sun Sep 26 21:15:18 2021> Description:   使用函数模板封装快速排序和归并排序 ************************************************************************/#include<iostream>using namespace std;const int N = 1e6 + 10;template<typename T>void mySwap(T& a, T& b) {    T temp = a;    a = b;    b = temp;}template<typename T>void quick_sort(T q[], int l, int r) {    if (l >= r) return;    int i = l - 1, j = r + 1, x = q[l + r >> 1];    while (i < j) {        do i++; while (q[i] < x);        do j--; while (q[j] > x);        if (i < j)  mySwap(q[i], q[j]);    }    quick_sort(q, l, j), quick_sort(q, j + 1, r);}template<typename T>void merge_sort(T q[], T temp[], int l, int r) {    if (l >= r) return;    int mid = l + r >> 1;    merge_sort(q, temp, l, mid);    merge_sort(q, temp, mid + 1, r);    int k = 0, i = l, j = mid + 1;    while (i <= mid && j <= r) {        if (q[i] <= q[j])   temp[k++] = q[i++];        else temp[k++] = q[j++];    }    while (i <= mid)    temp[k++] = q[i++];    while (j <= r)  temp[k++] = q[j++];    for (i = l, j = 0; i <= r; i++, j++)    q[i] = temp[j];}template<typename T>void printArr(T arr[], int l, int r) {    for (int i = 0; i < r; i++) {        cout << arr[i] << " ";    }    cout << endl;    cout << "数组中的元素个数为 "<< r << endl;}void test01() {    char charArr[] = "bagdakfasd";    int size = sizeof(charArr) / sizeof(char);    cout << "快速排序" << endl;    quick_sort(charArr, 0, size - 2);    printArr(charArr, 0, size - 2);    //有一个空字符}void test02() {    int intArr[] = { 1, 5, 6, 3, 7, 4, 8, 9};    int size = sizeof(intArr) / sizeof(int);    quick_sort(intArr, 0, size - 1);        cout << "快速排序" << endl;    printArr(intArr, 0, size - 1);    }void test03() {    char charArr[] = "bagdakfasd";    int size = sizeof(charArr) / sizeof(char);    char temp[N];    cout << "归并排序" << endl;    merge_sort(charArr, temp, 0, size - 2);    printArr(charArr, 0, size - 2);    //有一个空字符}void test04() {    int intArr[] = { 1, 5, 6, 3, 7, 4, 8, 9};    int size = sizeof(intArr) / sizeof(int);    int temp[N];    cout << "归并排序" << endl;    merge_sort(intArr, temp, 0, size - 1);    printArr(intArr, 0, size - 1);    }int main() {    test01();    test03();    test02();    test04();    return 0;}</code></pre><p>Linux下输入</p><pre class=" language-bash"><code class="language-bash">g++ template.cpp -o <span class="token function">test</span> <span class="token operator">&amp;&amp;</span> ./test</code></pre><p>得到输出为</p><pre class=" language-bash"><code class="language-bash">快速排序a a a b d d f g k 数组中的元素个数为 9归并排序a a a b d d f g k 数组中的元素个数为 9快速排序1 3 4 5 6 7 8 数组中的元素个数为 7归并排序1 3 4 5 6 7 8 数组中的元素个数为 7</code></pre><blockquote><p>使用函数模板必须确定出通用的数据类型T，并且可以推导出一致的类型</p><p>模板必须要确定出T的数据类型，才可以使用</p></blockquote><p>C++中我们使用函数模板有两种方式：自动类型推导和显示制定类型</p><p>我在上述代码中使用的是自动类型推导，不过建议是使用显示指定类型的方式，例如将<code>test01</code> 函数中的函数调用的表达式加上制定的类型，如下</p><pre class=" language-C++"><code class="language-C++">void test01() {    char charArr[] = "bagdakfasd";    int size = sizeof(charArr) / sizeof(char);    cout << "快速排序" << endl;    quick_sort<char>(charArr, 0, size - 2);    printArr<char>(charArr, 0, size - 2 );   //有一个空字符}</code></pre><p>我们需要留意一下普通函数调用和函数模板的区别</p><ol><li>普通函数调用可以发生自动类型转换（隐式类型转换）</li><li>函数模板调用时，如果利用自动类型推导，不会发生隐形类型转换</li><li>如果利用显示制定类型的方式，可以发生隐式类型转换，相当于普通函数</li></ol><p>总结一下推荐做法</p><blockquote><p>为了避免二义性，提供函数模板，就不要提供普通函数</p><p>建议使用显示制定类型的方式，调用函数模板</p><p>使用模板时必须确定出通用数据类型T，并且能够推导出一致的类型</p></blockquote><p>之后对函数模板加深理解之后会继续补充函数模板的知识</p><p>学识粗浅写作仓促，如有错误辛苦评论或 <a href="babyruth2403144@163.com">邮件</a> 指出，欢迎交流！</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法学习 </tag>
            
            <tag> C++ </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第25封信</title>
      <link href="/2021/09/25/di-25-feng-xin/"/>
      <url>/2021/09/25/di-25-feng-xin/</url>
      
        <content type="html"><![CDATA[<h1 id="第25封信-财富越多，责任越大"><a href="#第25封信-财富越多，责任越大" class="headerlink" title="第25封信 财富越多，责任越大"></a>第25封信 财富越多，责任越大</h1><blockquote><p>经中国政府不懈努力，当地时间9月24日，孟晚舟女士乘中国政府包机回国。自2018年12月1日，加拿大非法拘押孟晚舟长达1028天。在中国政府的回国包机上，孟晚舟发布了题为“月是故乡明，心安是归途”的感言：“感谢亲爱的祖国，感谢党和政府，正是那一抹绚丽的中国红，燃起我心中的信念之火，照亮我人生的至暗时刻，引领我回家的漫长路途。”</p></blockquote><p>上次提到现实生活中有太多的悲剧，今天这封信是讲财富越多，责任越大，今天刚好孟女士回国了，接近三年的时间仿佛昨天一般，因为疫情生活的时间线好像一下子被拉长了，好像做的上一件事情都可以追溯到很久之前。</p><p>回到我们的信，这封信的主题是财富越多，责任越大。先介绍一下背景1929年到1933年美国爆发了严重的经济危机，这时候是罗斯福执政，洛克菲勒在这封信的开头痛斥了罗斯福</p><blockquote><p>他是多么狭隘自私、卑劣、小心眼的人啊！他竟然利用手中的权力为自己谋私，在那场不公平的竞争中，让我们收到了联邦法院开出的美国史无前例的巨额罚单，还要求我们解散公司。</p></blockquote><p>在金融危机中洛克菲勒、摩根等人通过巨额的资金和声望帮助华尔街度过了经济危机</p><blockquote><p>我想，但凡和我一样怀有对祖国炙热的爱的人，都会在国家危难之际，贡献出自己的一分力量和忠心。</p><p>名誉和美德仅仅是心灵的装饰物，但是假如缺少了它，人就变得不完美。</p></blockquote><p>一个被社会主义所唾弃的资本家，在现实生活中也是有其正面意义的。这就是理论和现实的区别。但是有一点是要认同的，时势造英雄，每个时代、每个国家都有自己的英雄，英雄有着超乎常人的影响力，可以影响整个国家的发展。每个人如果都可以在国家需要自己的时候挺身而出，比拥有再多的钱还要崇高。</p><p>孟晚舟回国，我们的国家强大了，华为受到制裁已经1000多日了，这家公司还是有它的生命力和作为中国公司的责任感，时代会无情的碾碎个人的命运前进，个人是渺小的，但是无数个人汇聚而成的国家会拥有无比强大的生命力，推动时代的巨轮往前翻滚！</p><p>学识粗浅写作仓促，如有错误辛苦评论或 <a href="babyruth2403144@163.com">邮件</a> 指出，欢迎交流！</p>]]></content>
      
      
      <categories>
          
          <category> 洛克菲勒写给儿子的38封信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 人生观 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第23封信</title>
      <link href="/2021/09/23/di-23-feng-xin/"/>
      <url>/2021/09/23/di-23-feng-xin/</url>
      
        <content type="html"><![CDATA[<h1 id="第23封信-让金钱成为人的奴隶"><a href="#第23封信-让金钱成为人的奴隶" class="headerlink" title="第23封信 让金钱成为人的奴隶"></a>第23封信 让金钱成为人的奴隶</h1><p>记得有一句话是这样说的：<strong>悲剧就是把美好的东西毁灭给人看</strong></p><p>我们现实生活中有太多的悲剧，原因千千万万，这里我们可以谈论一下“制造贫穷”产生的悲剧或者说我对金钱是否是万恶之源谈谈自己的看法</p><p>首先我明确的认为金钱不是万恶之源理由如下，可能存在逻辑问题，仅仅是自己的拙见</p><p>首先人类发展的历史进程来看，金钱是一个衍生物，它并没有伴随人类或者其他物种的出现而出现，它是我们社会发展的产物，从最开始的贝壳、黄金等充当一般等价物的物件演化为如今的货币。那么有一点就很明显了，金钱可能是万恶的，但不可能是万恶之源，因为这个东西过去并不一定存在，它是我们抽象出来的一个概念。现在的问题就是金钱是不是万恶的了，我们用反证法，如果金钱是万恶的，那么我们可以推出金钱等价于恶，在我们的概念中善恶是互斥的，善不是恶，不能恶。那么金钱就是善的反面，我们只需要找出来一个金钱是善的例子就可以通过反证法证明这个结论不成立了。</p><p>例子如下：</p><ol><li>中国通过金钱大力发展国家城镇的基础建设</li><li>中国通过金钱的援助帮助贫困户脱贫，贫困县摘帽</li><li>在前段时间河南郑州、新乡等地区发生水灾的时候，鸿星尔克捐助巨款的金钱</li><li>等等</li></ol><p>那么我们可以很容易的得到证明金钱可以行善的例子，那么综上所述，金钱不是万恶之源</p><p>书中洛克菲勒通过“喜爱金钱是万恶之源”和“金钱是万恶之源”的区别劝诫了一个清贫的年轻人，通过人的需求层次我们可以知道，基本的物质保障才是往更高的层次发展的基础，有一句话说的很好，经济基础决定上层建筑。</p><p>君子爱财取之有道，只要我们通过合适的方式实现自己的价值，伴随着价值就会有物质的回报，目前我们人类社会距离社会主义实现的距离还是很遥远，有生之年应该看不到社会主义胜利的红旗飘扬，但是我们可以通过积极主动的行动争取这一天的到来，每个人都是自己的历史，历史只是把每个人的历史汇聚到一起而已。</p><p>关于金钱观当代人应该有着积极正确的态度，当金钱的主人而不是奴隶</p><p>不过这封信是从一个巨富手中发出的，那么他的看法我们也要辩证的看，他是一个不折不扣的资本家，在资本主义国家横行霸道，不过他对金钱的看法确实如此的真诚：“我爱钱，我要当金钱的主人而不是奴隶。而且我希望我的儿子也可以这样做。”</p><blockquote><p>偏执和骄傲会导致很多悲剧发生，制造贫穷的人也是如此</p><p>爱情是上帝对人类最好的馈赠。但是，假如在爱情上再加上金钱，那么一定使爱情更加幸福甜蜜，金钱的魔力就在于此！</p></blockquote><p>上面摘抄了文中的部分段落，其中表达的道理不对不错，我们建立自己的金钱观中其实也是通过听到或者看到的不对不错的道理中选择了一些适合自己的罢了，仅此而已</p><p>那么怎么梳理个人自己的金钱观呢？这里我用一句很经典的话进行回答</p><blockquote><p><strong>从实际去做中学习如何去做的道理</strong></p></blockquote><p>这是《如何阅读一本书》中的一句话，第一次看到不以为然，之后反复阅读中觉得这句话太棒了！我们的做的绝大多数事情是可以通过这句话的。写作、学习说话、体育项目还有coding等等，如果你遇到一个难题的时候不妨想一下这句话，看能不能带给你一定的启发</p><p>学识粗浅写作仓促，如有错误辛苦评论或 <a href="babyruth2403144@163.com">邮件</a> 指出，欢迎交流！</p>]]></content>
      
      
      <categories>
          
          <category> 洛克菲勒写给儿子的38封信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 人生观 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详谈const in C++</title>
      <link href="/2021/09/22/xiang-tan-const-in-c/"/>
      <url>/2021/09/22/xiang-tan-const-in-c/</url>
      
        <content type="html"><![CDATA[<h1 id="const"><a href="#const" class="headerlink" title="const"></a>const</h1><blockquote><p>学习C++那些事的个人笔记，原项目链接<a href="https://github.com/Light-City/CPlusPlusThings">C++那些事</a> </p></blockquote><h2 id="为什么要用const常量代替-define"><a href="#为什么要用const常量代替-define" class="headerlink" title="为什么要用const常量代替#define"></a>为什么要用<code>const</code>常量代替<code>#define</code></h2><p>因为<code>const</code>常量具有类型，编译器可以进行安全检查；<code>#define</code> 宏定义没有数据类型，只是简单的字符串替换，不能进行安全检查。</p><blockquote><p>宏是源代码的预处理手段，宏本身并非C++语言的一部分；宏是全局的，面向对象的程序设计中破坏了封装，不好！</p><p>具体做法：用常量、枚举、和内联函数代替<code>#define</code></p></blockquote><h2 id="const限定的变量和const常量"><a href="#const限定的变量和const常量" class="headerlink" title="const限定的变量和const常量"></a>const限定的变量和const常量</h2><ol><li>const定义的变量的类型<code>(type)</code>为整数或枚举时,且以常量表达式初始化时才能作为常量表达式。</li><li>其他情况下它只是一个<code>const</code>限定的变量，不是常量！</li></ol><h2 id="const作用"><a href="#const作用" class="headerlink" title="const作用"></a>const作用</h2><ol><li>尽量使用常量，防止修改，增加程序健壮性。这是防卫型(defensive)程序设计原则</li><li>节省空间，避免不必要的内存分配</li></ol><blockquote><p>const定义常量从汇编角度看只是给出了对应的内存地址，在程序运行过程中只有一份拷贝（具体是内存空间的什么位置，等学到相关知识再进行补充）</p><p><code>#define</code> 给出的是立即数，在内存中有若干个拷贝</p></blockquote><h2 id="const对象默认文件局部变量"><a href="#const对象默认文件局部变量" class="headerlink" title="const对象默认文件局部变量"></a>const对象默认文件局部变量</h2><pre class=" language-C++"><code class="language-C++">// file1.cppint ext;// file2.cpp#include<iostream>/** * by 光城 * compile: g++ -o file file2.cpp file1.cpp * execute: ./file */extern int ext; //用的是file1.cpp的ext,这是一个声明int main(){    std::cout<<(ext+10)<<std::endl;}</code></pre><blockquote><p>非<code>const</code>变量默认为<code>extern</code>，未被<code>const</code>修饰的变量定义时无需<code>extern</code>显式定义</p></blockquote><pre class=" language-C++"><code class="language-C++">//extern_file1.cppextern const int ext=12;//extern_file2.cpp#include<iostream>/** * by 光城 * compile: g++ -o file const_file2.cpp const_file1.cpp * execute: ./file */extern const int ext;int main(){    std::cout<<ext<<std::endl;}</code></pre><blockquote><p>const常量定义初始化，需要显式声明</p></blockquote><h2 id="指针与const"><a href="#指针与const" class="headerlink" title="指针与const"></a>指针与const</h2><h3 id="各种指针的声明方式"><a href="#各种指针的声明方式" class="headerlink" title="各种指针的声明方式"></a>各种指针的声明方式</h3><pre class=" language-C++"><code class="language-C++">const char* a;       //指向const对象的指针，指向常量的指针 const datachar const* a;       //const data, same as above.char* const a;       //指向char对象的const指针 const pointerconst char* const a; //const pointer, const data</code></pre><p>如果<code>const</code>位于<code>*</code>的左侧，则<code>const</code>就是用来修饰指针所指向的对象；如果<code>const</code>位于<code>*</code>的右侧，<code>const</code>就是修饰指针本身，即指针本身是常量。</p><p><strong>允许把非const对象的地址赋给指向const对象的指针</strong>，如果需要修改指针所指向的对象值，必须通过其他方式（）修改，不能直接通过当前指针修改。</p><h4 id="我的理解"><a href="#我的理解" class="headerlink" title="我的理解"></a>我的理解</h4><ol><li>指向const对象的指针指向的对象不一定是常量，只不过这个指针只能访问该对象，不能修改这个对象而已。这只是约束指针的一种手段，不管对象是不是常量，你都不能改。别人可以改你不行</li><li>const常量的地址只能赋给指向常量的指针或者指向常量的常量指针(<code>const pointer</code>)</li></ol><p>常指针必须初始化，const指针的值不能修改</p><p><em><strong>注意</strong></em>：assignment of read-only variable ‘ptr’<code>这个ptr是const指针，他是只读的指针，不能写</code></p><pre class=" language-C++"><code class="language-C++">#include<iostream>using namespace std;int main(){    int a  = 10;    int b= 20;    int* const ptr1 = &a;    *ptr1 = 15;    // ptr1 = &b;   // error: assignment of read-only variable ‘ptr1’    const int* ptr2;    ptr2 = &a;    ptr2 = &b;    // *ptr2 = 100;    //error: assignment of read-only location ‘* ptr2’    cout << *ptr1 << endl;    cout << *ptr2 << endl;    return 0;}</code></pre><blockquote><p>总结：</p><p>常量指针如ptr1，Ptr1的值是一个地址，地址不能改，<strong>常量指针不是常量！</strong>，是const限定的变量</p><p>指向常量的指针如ptr2，可以更改指向，这个指针并不是常量，只是常量的地址一定要由指向常量的指针指向，不过指向常量的指针也可以不指向常量，只是无法通过指向常量的指针去修改这个东西而已。</p></blockquote><h2 id="函数中使用const"><a href="#函数中使用const" class="headerlink" title="函数中使用const"></a>函数中使用const</h2><h3 id="无意义的情况"><a href="#无意义的情况" class="headerlink" title="无意义的情况"></a>无意义的情况</h3><pre class=" language-C++"><code class="language-C++">const int func1();        //返回值本身就是赋值给其他的变量void func(const in val);  //形参在函数体内不会改变，包括传入的形参是指针void func(int* const var);//指针本身不可变</code></pre><blockquote><p>输入参数用“值传递”，函数将自动产生临时变量用于复制该参数，无需保护</p></blockquote><h3 id="有意义的情况"><a href="#有意义的情况" class="headerlink" title="有意义的情况"></a>有意义的情况</h3><pre class=" language-C++"><code class="language-C++">const int* func1(); //返回指向常量的指针，指针指向的内容不会因为这个指针发生变化（相当于这个指针是只读指针）int* const fun2(); //返回常量指针，指向不会变，指针本省不可变void StringCopy(char* dst, const char* src);//函数体内不能更改src的内容void func(const A& a)//参数为引用，增加效率同时防止修改</code></pre><p> 引用就是一个常量指针，指向不能变</p><p> <code>引用传递</code> 不会产生临时对象</p><p><code>void func(A a)</code> 函数效率低，函数会产生A类型的临时对象用于复制参数<code>a</code> ，临时对象的构造、复制、析构过程都将消耗时间。</p><p><code>void func(int x)</code> 需要改为<code> void func(const int&amp; x)</code> 吗？</p><p><strong>不需要</strong> 内置数据类型（<code>built-in type</code>）的参数不存在构造、析构的过程，复制很快，“值传递”和“引用传递”的效率几乎相当。</p><p><strong>面试题</strong></p><ol><li>如果函数需要传入一个指针，是否需要为该指针加上<code>const</code>，把<code>const</code>加在指针不同的位置有什么区别；</li><li>如果写的函数需要传入的参数是一个复杂类型的实例，传入值参数或者引用参数有什么区别，什么时候需要为传入的引用参数加上<code>const</code>。</li></ol><h2 id="类中使用const（未完成）"><a href="#类中使用const（未完成）" class="headerlink" title="类中使用const（未完成）"></a>类中使用const（未完成）</h2><blockquote><p>类中，任何不会修改数据成员的函数都应该声明为const类型，可以提高程序的健壮性</p></blockquote><p><strong>常成员函数</strong>：使用const关键字进行说明的成员函数，<strong>只有</strong>常成员函数可以操作常量或常对象</p><p>学识粗浅写作仓促，如有错误辛苦评论或 <a href="babyruth2403144@163.com">邮件</a> 指出，欢迎交流！</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法学习日历</title>
      <link href="/2021/09/20/suan-fa-xue-xi-ri-li/"/>
      <url>/2021/09/20/suan-fa-xue-xi-ri-li/</url>
      
        <content type="html"><![CDATA[<h3 id="理想情况"><a href="#理想情况" class="headerlink" title="理想情况"></a>理想情况</h3><p>一轮： 数组 -&gt;字符串 -&gt;链表-&gt;二分查找-&gt;排序-&gt;哈希表-&gt; 栈-&gt;队列 -&gt;树 、递归、回溯 -&gt; 堆 </p><p>简单题</p><p><span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>二轮：拓扑排序-&gt;分治算法-&gt; 二叉搜索树-&gt;贪心算法-&gt;动态规划-&gt; 深度优先搜索 -&gt; 广度优先搜索–&gt;图-&gt;数学 </p><p>一轮中等题，二轮简单题</p><p>三轮： 字典树-&gt; 并查集 -&gt; 树状数组-&gt;线段树</p><ul><li>一轮简单题</li><li>一轮中等题加二轮简单题</li><li>一轮hard（尝试），二轮中等（选看到有思路的题目），三轮简单。</li></ul><h3 id="目前进行"><a href="#目前进行" class="headerlink" title="目前进行"></a>目前进行</h3><p>第一轮 预计共30天 题目大概160道。</p><p>一轮： 数组 -&gt;字符串 -&gt;链表-&gt;二分查找-&gt;排序-&gt;哈希表-&gt; 栈-&gt;队列 -&gt;树、递归-&gt;二叉搜索树-&gt;回溯算法 -&gt; 贪心算法-&gt;动态规划-&gt;单调栈    </p><p><strong>时间2021/8/12 - 2021/9/15  中间休息了两天，等于一个月过了一轮，总共刷了大概160题。</strong></p><p>二轮：预计10月底结束</p><p>从剑指offer入手，每天写剑指offer专题（2-3）道题，9.26暂停，先整acwing </p><p>acwing基础课 基础算法-&gt;数据结构-&gt;搜索与图论-&gt;数学知识-&gt;动态规划-&gt;贪心 （涵盖理想情况的二论顺序！） 大概一个月 共106道题，每天3 - 5道题，大概30天</p><p>三轮：</p><p>acwing提高课 104h 共219道题，预计做150题就ok了 大概60天 所以 12月底大概能够完成二轮</p><p>动态规划-&gt;搜索-&gt;图论（简单学习）-&gt;高级数据结构（并查集，树状数组，线段树，平衡树，AC自动机）-&gt;数学知识-&gt;基础算法</p><p>复习轮：</p><p>剑指Offer(报名acwing) 在11月底记得报名大概7周 1月底结束</p><p>Leetcode 前300题</p><p>acwing 二刷</p><h3 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h3><ul><li>首先通过大概一个月的时间，快速刷题，了解做题套路和题目的大致类型，相当于一轮中的到单调栈，期间看代码随想录，没有看书。通过做题了解数据结构。<strong>9.15结束一轮</strong></li><li>然后回到书本，看大话数据结构 和 算法笔记 的内容，做大概50道PAT的题目+若干道牛客网的题目，其中有处理输入输出的部分。大话数据结构中有一些内容不一定要做题，但是要有基本的概念，比如B+树这种，算法笔记要刷题了这一次，在leetcode 上也找一点题目做。</li><li><strong>预计10.15结束，期间做题大概累计到acwing50道，Leetcode220道，期间重刷题目</strong></li><li></li><li>二刷简单题争取一天可以做大概50道题，记录二刷还不懂的题目。然后要进行龟速记录总结题目了。</li><li>结束三轮，争取在12月之前结束。</li></ul><hr><p><strong>一轮</strong></p><h2 id="数组-一轮用时6天，好像没做完"><a href="#数组-一轮用时6天，好像没做完" class="headerlink" title="数组 一轮用时6天，好像没做完"></a>数组 一轮用时6天，好像没做完</h2><p>2021/6/1 - 2021/6/6 完成一遍。</p><h2 id="链表题目-一轮用时1天？"><a href="#链表题目-一轮用时1天？" class="headerlink" title="链表题目 一轮用时1天？"></a>链表题目 一轮用时1天？</h2><p>2021/8/12 今天学习链表 1，2，4，5，7，8 ？差不多。习题没做</p><h2 id="哈希表题目-一轮用时2天"><a href="#哈希表题目-一轮用时2天" class="headerlink" title="哈希表题目 一轮用时2天"></a>哈希表题目 一轮用时2天</h2><p>438 </p><p><a href="https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/">https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/</a></p><p>2021/8/13 今天学习哈希表 从1 - 8 还剩 9 - 11；习题做了。</p><p>2021/8/14 哈希完成。字符串1,2.3</p><h2 id="字符串-加-栈和队列-一轮用时-4天，中间断了两天"><a href="#字符串-加-栈和队列-一轮用时-4天，中间断了两天" class="headerlink" title="字符串 加 栈和队列 一轮用时 4天，中间断了两天"></a>字符串 加 栈和队列 一轮用时 4天，中间断了两天</h2><p>2021/8/14 字符串1，2，3</p><p>2021/8/17 字符串4，5，留了两道KMP的题目，晚上先看理论，明天再完成。</p><p>2021/8/17 双指针法 除了删除链表第N个节点，其他的都写过，暂时没写，进入下一个专题</p><p>2021/8/17 栈与队列 先不开始了，先搞一下C++关于STL容器或容器适配器的语法。</p><p>2021/8/18 字符串KMP知道原理了，但是代码实现不出来。</p><p>2021/8/18 栈与队列1，2，3，4，5，6，明天KMP加剩下两道题。</p><p>2021/8/19 KMP两道题，一道优先队列，一道滑动窗口 字符串和栈完结，没看总结，总结直接回顾。已经61题了。</p><h2 id="二叉树-一轮用时10天"><a href="#二叉树-一轮用时10天" class="headerlink" title="二叉树 一轮用时10天"></a>二叉树 一轮用时10天</h2><p>2021/8/20 二叉树1，2，3，5。 4是统一的迭代写法，暂时不看，没必要。5中199 116 117没写，其余7道自己完成！。</p><p>2021/8/20 6 只用层序遍历法完成了，其他方法没写。已经完成72道题。今天写了12道题，是二叉树关于遍历的简单题，不要骄傲哦。</p><p>2021/8/21 今天二叉树！199独立完成。116和117一样的。226其他方法自己研究一下。 8之后下周开始。这周做一些贪心</p><p>2021/8/21 贪心初探 分发饼干，人麻了，之前看过的。回到二叉树吧</p><p>2021/8/22 二叉树 今天完成每日一题，鬼抓人问题，已经77题了，加油！完成8，9，10，11。已经82题了，即将一百题。</p><p>2021/8/23 二叉树 12，13，15，16，17，18 （注意：18 中113路径总和二的题解不懂）（19，20没精力了已经88道题了</p><p>2021/8/24 STL leetcode 3道题 已经91题了。今天算法holiday。</p><p>2021/8/25 二叉树 18 路径总和二 ，19，20，21 94题了， 今天的三道题有点难度，中序后序构建二叉树，还有最大树</p><p>2021/8/26 二叉树 22，23，24，25。100题了！！！</p><p>2021/8/27 二叉树 今天状态不好，刷几道简单题 二叉树不进行。晚睡状态太差了。</p><p>2021/8/28 二叉树 小问题，map的顺序。26，27，28，29，30，31(迭代法先没写，二刷再写) 昨晚睡的还行，状态好很多。麻了。106道题了，今天的每日一题，真的太简单了。</p><p>2021/8/29 完成二叉树，只剩最后三道题了。leetcode669 这道题玩我，为什么会有奇怪的输入递归可以通过但是输入还是报错？？迭代法就不行？？。问题找到了。108只写了递归法（迭代法留到二刷）。二叉树全部习题结束。</p><pre class=" language-C++"><code class="language-C++">class Solution {//迭代法，未通过代码。问题已经找到，是什么呢？？！！！！！！        while (root != nullptr && root->val < low || root->val > high)</code></pre><h2 id="回溯算法-一轮用时3天-麻了9-6已经把回溯忘完了。"><a href="#回溯算法-一轮用时3天-麻了9-6已经把回溯忘完了。" class="headerlink" title="回溯算法 一轮用时3天 麻了9.6已经把回溯忘完了。"></a>回溯算法 一轮用时3天 麻了9.6已经把回溯忘完了。</h2><p>2021/8/30 开始回溯算法1，2，3，4，5，，7，8进行了8节，然后做了5道题，题目思路想法较为统一，熟练掌握即可。解决了115道题了。</p><p>2021/8/31 回溯算法 9，10，11，，13，14，15，16 完成，已经完成122道题。</p><p>2021/9/1 回溯算法 18，19，20，21。最后四道题，周末总结都没做。18昨天都写过，不写。22周末总结先不看。</p><h2 id="贪心算法-一轮用时3-5天"><a href="#贪心算法-一轮用时3-5天" class="headerlink" title="贪心算法 一轮用时3.5天"></a>贪心算法 一轮用时3.5天</h2><p>2021/9/2 贪心算法1 ，2，3，4，6，7，12 。已经130道题了。</p><p>2021/9/3 贪心算法8，9，11，13，14，16，17。已经135道题了。17 18即为相似。</p><p>2021/9/4 贪心算法 预计18，19，20，22，（23没写，和动态规划一起写，带手续费了）。已经138道题了。</p><p>2021/9/5 贪心算法 24 （23留到动态规划一起写）结束贪心！（23贪心太复杂，先放弃）</p><h2 id="动态规划-一轮用时9天"><a href="#动态规划-一轮用时9天" class="headerlink" title="动态规划 一轮用时9天"></a>动态规划 一轮用时9天</h2><p>2021/9/5 动态规划 1，2，3，4，6（数论方法和深度搜索方法没有写），7，8，9，11</p><p>2021/9/6 动态规划 11，12，（11，12是好东西，一定要多看几遍）13，14，16，17，18  已经150题了！即将进入前十万</p><p>2021/9/7 动态规划 19，21，22，23，24，26，27，28， 29，30，31。</p><p>2021/9/8 动态规划 32，34，35，36（36没写），37（37没写），39  已经160题了</p><p>2021/9/9 动态规划 36，37，41，42，43   两个股票完成，太难了，今天状态不太好，明天加油。 167了，加油，明天就前十万了！！！！哈哈，他好像是12点更新，所以确实是9/10 进入前十万咯！！！</p><p>2021/9/10 动态规划44， 45， 46，47，48，49 ，50今天有简单题没有想到动态规划的解法，很遗憾，加油。48，50看不明白。 172道题了。</p><p>2021/9/11 动态规划 今天出去转了一天，头很晕，状态很差，随便看看题解。休息day</p><p>2021/9/12  动态规划 写一道每日一题就好了。有栈，贪心，动态规划（复杂度太高，不做了）三种情况，都写一遍，明早拿下最后四道动态规划！</p><p>2021/9/13  动态规划 48，50，52（双指针法没写，很好），53 （放过最长回文子序列，放过我自己）呜呜呜</p><h2 id="单调栈-一轮用时2天"><a href="#单调栈-一轮用时2天" class="headerlink" title="单调栈 一轮用时2天"></a>单调栈 一轮用时2天</h2><p>2021/9/14单调栈 1，2，3 今天晚上7点开冲，势必拿下!已经拿下，你是最棒的！抱住弱小的自己。182道题了</p><p>2021/9/15单调栈4，5 + 最长回文字串   5的单调栈写法还不会。187道题了。</p><p><strong>一轮over</strong></p><hr><p><strong>二轮</strong> </p><h2 id="剑指Offer-预计一个月到10月15号-每日总结"><a href="#剑指Offer-预计一个月到10月15号-每日总结" class="headerlink" title="剑指Offer 预计一个月到10月15号 每日总结"></a>剑指Offer 预计一个月到10月15号 每日总结</h2><p>2021/9/16 03 04 002 003 今天001没有写出来，除法有点难。麻了 已经192道题了</p><p>2021/9/17 05 06  004只会简单的sort和哈希（还有三种方法不会）006双指针最优解（二分查找不是最优不会）005不会写不出来</p><p>18 19 20 中秋节放假</p><p>2021/9/21 07 很久没有写重建二叉树了，一个bug卡了我30分钟</p><p>2021/9/22  07 09 10 11 今天总体还不错</p><p>2021/9/23 完成每日一题 12（回溯法不熟练）13（先放着，等练练回溯法）14get 15自己能写出来，高阶玩法还不会 16 超时 17能ac但是不是最优解 18：42先去健身了，回来再战！ 16 17 两道题好好研究一下。麻了。Leetcode和剑指Offer书上是两种”不同“的题目，还是书上的题目说法难啊，Leetcode简化了题目 现在已经211道题了 </p><p>2021/9/24 18 21 22 24 25（19 20 未完成！23没有，是环形链表的题目，先存着）现在已经214题了。反转链表和合并有序链表的递归写法不熟练，每日一题看不懂。</p><p>2021/9/25 26 27 28 29 今天总体还不错 .25重写6二叉树反转（二叉树的镜像剑指27）发现不太会。因为8.20当时就没写好，麻了。每日一题是9.15做的动态规划问题，问题不难，但是还是没思路。可能还是刷题不够。因为只做了一遍，还是要二刷的。29螺旋矩阵参考路飞的题解，讲的很好，很简洁！学习了。已经221道题</p><h2 id="acwing基础课-预计30天完成-10-26前完成！"><a href="#acwing基础课-预计30天完成-10-26前完成！" class="headerlink" title="acwing基础课 预计30天完成 10.26前完成！"></a>acwing基础课 预计30天完成 10.26前完成！</h2><p>2021/9/26  acwing基础课 看课程，然后学习一下算法，快排，归并排序，二分</p><p>2021/9/27  acwing基础课 练习 快排，归并，二分的模板题，用了老子早上接近4个小时，每个模板练了3-5次 ，晚上顺便写了Leetcode的剑指Offer的逆序对和前k小的数，虽然模板可以直接用，但是还要再改那么一下下。Leetcode 224,acwing 6/106</p><p>晚上听课高精度 + 前缀 到1：49：21，明天早上练习6道模板题</p><p>2021/9/28  acwing基础课 练习 高精度和前缀和模板题，用了3个小时，每个模板练了3-5次 已经完成 11/106，晚上看课程 第一章基础算法二结束，习题课先不看，直接看基础算法三  到1：03 看了双指针 加 位运算 </p><p>2021/9/29  acwing基础课 练习 子矩阵的和，差分，双指针 位运算 的模板题，用了 3个小时，每个模板练了3-5次 子序列的题下午5点30练了一下 已经完成 18/106 ，晚上看了区间和（离散化） 和区间合并的问题，明早练习模板题</p><p>2021/9/30  acwing基础课练习区间和 和 区间和并  的2道模板题，用了2.5个小时，每个模板练了3-5次,打卡完成第一讲！<strong>第一讲共用5天20/20</strong> 下午看第二章数据结构的课 链表 临链表 栈与队列 到1：13：05  ，晚上  再练习一点模板题 有4道题卧槽，麻了。晚上用2个小时学习了一下今天下午看课程的4道题，其中模拟栈和队列比较简单，但是数组构建单链表和双链表还是比较繁琐的，尽管已经简化到很简单的程度了。明天早上把这4到模板提练习一波，国庆快乐！<strong>共计：已经完成 20/106</strong></p><p>2021/10/1  acwing基础课 练习单双链表，队列，栈的模板题，用时大概2个小时不到吧:早上继续看课程 单调栈 到1:31:00，下午来了就把单调栈的模板写了 然后学单调队列，写单调队列的板子（下午已经完成了单调队列的学习和板子的练习），晚上学习一下KMP，Trie  和 并查集  今天已经完成  6/17</p><p>2021/10/2  acwing基础课 中午开始练习KMP，Trie，并查集的4道模板题（还差2题，一个最大异或对，一个食物链），用时大概3个小时 然后开始学习堆和哈希表，下午到1：48 晚上接着看模拟堆和哈希表，模拟堆看不懂，先看哈希表与STL简单介绍吧 晚上看完了。明早练习题目 今天已经完成  6 + 4 = 10/17</p><p>2021/10/3  acwing基础课 练习 堆排序 两种哈希的方法，还有字符串哈希，模拟堆，用时大概 3.5个小时 今天已经完成  10 + 4？ 14/17 还剩  表达式求值 最大异或对 食物链，这三道题压栈，难度小大<strong>第二讲用了4天，未全部完成 已经完成14/17</strong>晚上开始搜索与图论的内容，先一鼓作气学习一遍！晚上看了DFS的全排列和八皇后问题的第一种写法，明早来看完第二种写法和BFS开始练习模板。 <strong>共计：完成 34/106</strong> </p><p>2021/10/4  acwing基础课 早上晚起床了，11点爬过来看课程，看完了图论的第一讲，人麻了，今晚过来再看一遍，明天早上练习一下模板题目，有6道题！  图论等学完dp再进行 。<strong>暂停图论！，贪心搞完回来搞图论的东西</strong></p><p>🦑🦑🦑</p><p>5，6，7休息，只看了一下dp的第一节课。7晚上练习了两道模板题01背包和完全背包，已经完成了2/18，明天练习 模板题 多重背包，多重背包优化，分组背包的模板题</p><p>2021/10/8   acwing基础课 练习模板题3道， 看课程，然后学习一下算法，已经完成 5/18，下午继续看线性dp的课程,写第二课的题目 完成 数字三角形、最长递增子序列、优化最长递增子序列的模板练习 看了 最长公共子序列、最短编辑距离、编辑距离 的课程，明早过来练习一手。今天已经完成了8/18 今天完成了6道dp的模板题目练习！练习的有点多了，明天水三道题。</p><p>2021/10/9  acwing基础课 早上练习模板题 3道，用时1.5h， 晚上看课程区间dp 加计数dp，数位统计dp的第一题，没怎么看懂，数位统计dp中y总翻车了。看来问题还是挺难的。明早再看一下蒙德里安的梦想，练习一下石子合并、整数划分和蒙德里安的梦想三道题，有点难度的！已经完成了11/18</p><p>2021/10/10  acwing基础课 练习模板题石子合并和整数划分，很快，用了半个小时，然后看课程学习一下蒙德里安的梦想 和之后的问题，<strong>计数问题、蒙德里安的梦想、最短Hamilton路径、没有上司的舞会、滑雪。最后四道题搁置</strong> ，今天一鼓作气拿下！！！打扰了，今天的难度顶不住了，最短的路径问题是图的，我还没学图，看的很懵，没有上司的舞会是树型dp，也难度小大，后面这些题目难度就离谱，告一段落了!<strong>动态规划用时4天，未全部完成 已经完成13 /18</strong>  </p><p>先开启贪心模块！看了贪心的第一节课，要二刷，证明不明白。晚上把九天的板子就练习完了，一共5道题，有2道题的解答是一样的 已经完成5/8， 明天完成剩余的贪心部分！注意：贪心第一节课的证明不明白，要二刷！ <strong>共计完成52/106，目前共用了12天（15，中间休息三天）</strong></p><p>2021/10/11  acwing基础课 早看完贪心第二课，贪心练习模板，贪心一刷完结，代码难度较低，但是证明思路一定要明确，证明要二刷 <strong>贪心用时2个半天，已经完成8/8</strong> ,开启薄弱环节 <strong>搜索与图论</strong>    ，已经完成   0 + 6 ?/17, 共计已经完成 <strong>57/106</strong> ,下午练习了dfs的两道模板提，晚上再看bfs的两道模板题 已经完成   2 /17，走迷宫还能瞅瞅，八数码问题实属抽象。</p><p>2021/10/12  acwing基础课 中午起床，先写了走迷宫问题(easy)，然后看了并写了树的重心问题（hard），然后看了并写了图中点的层次问题(easy) 然后看了并写了又向图的拓扑序列，搜索视频一完结，已经完成6/17 ,顺便写了leetcode课表二，就是拓扑排序的问题。开始看搜索视频二，就是求最短路了。晚上看了Dijkstra的朴素版本和堆优化版本，明天早上默写</p><p>2021/10/13  acwing基础课 中午起床默写了两道题，开始学习bellman-ford、spfa、floyd算法 已经完成 9/17 ,bellman-ford练习模板。spfa和Floyd的三道题明早默写。  看完了搜索与图论 二 明晚看 三，争取后天结束图论 用时预计 6天</p><p>2021/10/14  acwing基础课 早默写三道题 用时1.5h 已经完成 12/17 看第三课了 看了prim 和kruskal算法，之后看二分图的染色法和匈牙利法。结束图论的课程。明早练习这四道题。</p><p>2021/10/15  acwing基础课 练习prim kruskal 染色法 匈牙利算法 <strong>搜索与图论用时六天，完成 16/17</strong> 还有一道八数码问题没有写出来，<strong>共计完成71/106</strong> 开启数学专题，数学专题就要多记笔记了，看一数学第一次课，有7道题，今晚加明早进行练习，今天晚上又看了一下数学专题的质数、约数，感觉是不是年纪大了，怎么听不懂。麻了</p><p>2021/10/16  acwing基础课 下午练习六道数学专题的题，已经完成 6/26（一道没写），明早过来看一下没写的一道题，还有数学专题的第二课，欧拉函数等等</p><p>2021/10/17  acwing基础课 筛质数，线性筛法和埃式筛法 然后看数学专题第二课 欧拉函数，快速幂 （证明不是很清楚） 已经完成 10/26</p><p>2021/10/18  acwing基础课 中国剩余定理先搁置 数学部分还是要放慢时间做一下笔记的，现在<strong>共计完成 86/106</strong> 接下来一周回到过去进行一下整理和复习！争取把剩余的20道题填满。有好几个专题留了一些题目。难度小大，二刷中进行总结，龟速刷题了！</p><p>today!</p><p><strong>二轮over</strong> </p><hr>]]></content>
      
      
      <categories>
          
          <category> 总动员篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法学习 </tag>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/09/20/hello-world/"/>
      <url>/2021/09/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
